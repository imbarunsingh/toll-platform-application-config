---
server:
  port: ${SERVER_PORT:9091}
spring:  
  rabbitmq:
    host: ${RABBITMQ_HOST_DEV:toll-platform-rabbit-mq} #RabbitMQ running as docker container. toll-platform-rabbit-mq is DNS name(hostname) for container and for the same host file entry on windows is also needed.
    port: ${RABBITMQ_PORT_DEV:5672}
    username: ${RABBITMQ_USERNAME_DEV:guest}
    password: ${RABBITMQ_PASSWORD_DEV:guest}
eureka:
  instance:
    lease-renewal-interval-in-seconds: 30 #Not advisable to change this value since self-preservation assumes that heartbeats are always received at intervals of 30 seconds
    lease-expiration-duration-in-seconds: 90 #Indicates the duration the server waits since it received the last heartbeat before it can evict an instance from its registry.This value should be greater than lease-renewal-interval-in-seconds.Setting this value too small could make the system intolerable to temporary network glitches.
    eureka.server.eviction-interval-timer-in-ms: 60 * 1000 #A scheduler is run at this frequency which will evict instances from the registry if the lease of the instances are expired as configured by lease-expiration-duration-in-second
    hostname: ${EUREKA_HOST:toll-platform-discovery-service}
  client:
    serviceUrl:      
      defaultZone: ${EUREKA_ZONE_URL:http://${eureka.instance.hostname}:${server.port}/eureka/}
    registerWithEureka: false
    fetchRegistry: false
  server:
    enable-self-preservation: true
    waitTimeInMsWhenSyncEmpty: 0
  datacenter: Bangalore
  environment: Development
#Enables all Actuator endpoints meant for monitoring,
#e.g: localhost:8181/spring-cloud-config-client/actuator/metrics
#Exposing 17 endpoint(s) beneath base path '/actuator' - See for this message in logs after applilcation start up to ensure actuator is enabled
management:
  endpoints:
    web:
      exposure:
        include: "*"
#For Distributed Tracing using Spring Cloud Sleuth and log level config
logging:
  level:
    root: ${LOG_LEVEL:INFO}
    org.springframework.cloud.sleuth: ${LOG_LEVEL:ERROR}
    org.springframework.boot.autoconfigure: ERROR #because on INFO it generates too much of Auto-configure logs
    org.springframework.boot.devtools: WARN #because on INFO it generates too much of Auto-configure logs
    com.microservice: ${LOG_LEVEL:INFO}
  pattern:
    console: ${CONSOLE_LOG_PATTERN:%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(${PID}){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}}